AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: PlatinumEnoch Infrastructure (S3, Lambda@Edge, DynamoDB)
Parameters:
  CacheHash:
    Type: String
    Default: <CacheHash>
    Description: Work-around to bust Lambda@Edge Caching so this stack can be redeployed much faster
  DomainName:
    Type: String
    Default: <DomainName>
  Environment:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, avery]
  TemplatesBucketName:
    Type: String
    Default: <TemplatesBucketName>
Resources:
  #S3
  PlatinumEnochS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub ${Environment}-platinumenoch
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      NotificationConfiguration:
        QueueConfigurations:
        - Event: s3:ObjectCreated:Put
          Queue: !GetAtt PlatinumEnochSQS.Arn
    DependsOn: PlatinumEnochSQS
  PlatinumEnochS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PlatinumEnochS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AddPerm
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          - s3:PutObject
          Resource:
          - !Sub "arn:aws:s3:::${Environment}-platinumenoch/*"
          Condition:
            StringLike:
              aws:Referer:
                # S3 will give a 403 on it's bucket endpoints. It will only return a 200 if BariumNahumCDN passes in this designated url.
                - !Sub "https://${DomainName}/*"
  PlatinumEnochMediaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub ${Environment}-platinumenoch-media
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
            - !Sub "https://${DomainName}/*"
            AllowedMethods:
            - GET
            - PUT
            - DELETE
            - HEAD
            AllowedHeaders:
            - "Content-Type"
  PlatinumEnochMediaS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PlatinumEnochMediaS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AllowPublicRead
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectAcl # without this permission, the presignedurl invoked in PlatinumEnoch responds with a 403 error https://github.com/aws/aws-cli/issues/813#issuecomment-46174965
          - s3:DeleteObject
          Resource:
          - !Sub "arn:aws:s3:::${Environment}-platinumenoch-media/*"
    DependsOn: PlatinumEnochMediaS3Bucket
  #Lambda@Edge
  PlatinumEnochBasicAuthLambdaEdge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-PlatinumEnochBasicAuthLambdaEdge-${CacheHash}
      Runtime: nodejs10.x
      Handler: index.handler
      CodeUri:
        Bucket: !Ref TemplatesBucketName
        Key: platinumenoch-lambda-edge/lambda.zip
      MemorySize: 128
      Timeout: 5
      # More info at https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
      AutoPublishAlias: live
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
      Policies:
        - AmazonDynamoDBFullAccess
  PlatinumEnochBasicAuthTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: authUser
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: authUser
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub "${Environment}-PlatinumEnochBasicAuthTable"
  # SQS
  PlatinumEnochSQS:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 60
      QueueName: !Sub ${Environment}-PlatinumEnochSQS
      ReceiveMessageWaitTimeSeconds: 0 # keep this number to 0
      VisibilityTimeout: 14400
  PlatinumEnochSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PlatinumEnochSQS
      PolicyDocument:
        Id: !Sub ${Environment}-PlatinumEnochSQSPolicy
        Statement:
          - Sid: sendAndReceiveMessages
            Effect: "Allow"
            Principal: "*"
            Action:
              - "sqs:SendMessage" 
              - "sqs:ReceiveMessage"
            Resource: !GetAtt PlatinumEnochSQS.Arn
  PlatinumEnochCacheInvalidator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-PlatinumEnochCacheInvalidator
      Runtime: nodejs12.x
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk')
        const { BARIUMNAHUM_DISTRIBUTION_ID, QUEUE_URL, REGION } = process.env
        AWS.config.update({ region: REGION })

        // Create an SQS service object
        const sqs = new AWS.SQS({apiVersion: '2012-11-05'})

        exports.handler = function (event, context) {
          // https://gist.github.com/gordonbrander/2230317#gistcomment-3244708
          const createID = () => {
              return Array(16)
                .fill(0)
                .map(() => String.fromCharCode(Math.floor(Math.random() * 26) + 97))
                .join('') + 
                Date.now().toString(24)
          }
          const cloudfront = new AWS.CloudFront({apiVersion: '2019-03-26'})
          const invalidateCloudFrontCache = paths => {
            var params = {
                DistributionId: BARIUMNAHUM_DISTRIBUTION_ID, /* required */
                    InvalidationBatch: { /* required */
                        CallerReference: createID(), /* required */
                        Paths: { /* required */
                            Quantity: paths.length, /* required */
                            Items: paths
                    }
                }
            }
            cloudfront.createInvalidation(params, function (err, data) {
                if (err) {
                    console.log(err, err.stack)  // an error occurred
                } else {
                    console.log(data)            // successful response
                }
            })
          }
          var params = {
            QueueUrl: QUEUE_URL, /* required */
            AttributeNames: [
              'All',
            ]
          }
          sqs.getQueueAttributes(params, function(err, data) {
            if (err) {
              //console.log('C', err, err.stack)
              return false
            } else {
              const {
                ApproximateNumberOfMessages,
                ApproximateNumberOfMessagesNotVisible,
                ApproximateNumberOfMessagesDelayed
              } = data.Attributes
              
              //console.log(data)
              
              // If SQS is empty
                // invalidate Cloudfront
              
              params = {
                DistributionId: BARIUMNAHUM_DISTRIBUTION_ID,
                MaxItems: '5'
              }
              cloudfront.listInvalidations(params, function(err, data) {
                if (err) {
                  console.log(err, err.stack)
                }
                else {
                  // loop through items
                  // if no item status is in progress
                    // invalidate
                  // else if queue appears empty
                    // invalidate
                  const invalidationPaths = ['/*']
                  const statuses = []
                  data.Items.forEach( ({ Status }) => statuses.push(Status))
                  if(!statuses.includes('InProgress')) {
                    //console.log('E1')
                    invalidateCloudFrontCache(invalidationPaths)
                  } else {
                    if (Number(ApproximateNumberOfMessages) <= 1 && Number(ApproximateNumberOfMessagesNotVisible) <= 20  && Number(ApproximateNumberOfMessagesDelayed) <= 1 ) {
                      const invalidationPaths = ['/*']
                      invalidateCloudFrontCache(invalidationPaths)
                    }
                  }
                }
              })
            }
          })
        }
      Environment:
        Variables:
          BARIUMNAHUM_DISTRIBUTION_ID: <BariumNahumCDNDistributionId>
          QUEUE_URL: !Ref PlatinumEnochSQS
          REGION: !Ref AWS::Region
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PlatinumEnochSQS.Arn
            BatchSize: 10
      MemorySize: 128
      Timeout: 20
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudFrontFullAccess
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
            Resource: !GetAtt PlatinumEnochSQS.Arn
Outputs:
  PlatinumEnochS3BucketName:
    Value: !Ref PlatinumEnochS3Bucket
    Description: Name of S3 bucket to hold PlatinumEnoch files
  PlatinumEnochS3BucketWebsiteUrl:
    Value: !GetAtt PlatinumEnochS3Bucket.WebsiteURL
    Description: The S3 bucket url
  PlatinumEnochMediaS3BucketName:
    Value: !Ref PlatinumEnochMediaS3Bucket
    Description: Name of S3 bucket to hold PlatinumEnoch files
  PlatinumEnochMediaS3BucketWebsiteUrl:
    Value: !GetAtt PlatinumEnochMediaS3Bucket.WebsiteURL
    Description: The S3 bucket url
  PlatinumEnochBasicAuthLambdaEdgeVersion: 
    Description: PlatinumEnochBasicAuthLambdaEdge Version
    Value: !Ref PlatinumEnochBasicAuthLambdaEdge.Version